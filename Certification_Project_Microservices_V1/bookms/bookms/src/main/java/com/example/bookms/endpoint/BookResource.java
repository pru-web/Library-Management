package com.example.bookms.endpoint;

import com.example.bookms.domain.Book;
import com.example.bookms.repo.BookRepo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

// fetch/add/edit/delete books
@RestController
public class BookResource {

    @Autowired

    private BookRepo bookRepo;
//FETCHING BOOKS
    @GetMapping("/books")
    public List<Book> getAllUsers(){ return bookRepo.findAll();}
//FETCHING BOOKS WITH ID GENERATED BY JPA
    @GetMapping("/books/{id}")

    // -> @PathVariable is annotation in spring mvc. indicated that the methods expects an id parameter as part of url path

    public ResponseEntity <Book> getSingleBook(@PathVariable Integer id){
        //Logger.info("Fetching single book with id: {}", id);

        // -> Optional used to indicate multiple cases

        Optional<Book> bookFound = bookRepo.findById(id);
        if (bookFound.isPresent()) {
            //Logger.info("user found");
            return ResponseEntity.ok(bookFound.get());
        }

        //LOGGER.error("User not found: {}", id);
        return ResponseEntity.notFound().build();
    }
//ADDING BOOKS
    @PostMapping("/books")

    //-> @RequestBody annotation helps program expect a request body of type "book"

    public ResponseEntity<Book> addUser(@RequestBody Book book) throws URISyntaxException {
        //LOGGER.info("saving book");
        book.setId(null);
        //-> saving the new book object in book repo
        Book savedUser = bookRepo.save(book);
        //-> Response.Entity -> constructs and returns http response
        return ResponseEntity.created(new URI(savedUser.getId().toString())).body(savedUser);
    }

    @DeleteMapping("/books/{id}")
    public ResponseEntity<Void> deleteBook(@PathVariable Integer id) {
        Optional<Book> optionalBook = bookRepo.findById(id);
        if (optionalBook.isPresent()) {
            bookRepo.deleteById(id);
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }

    }

    //EDIT BOOK
    @PutMapping("/books/{id}")
    public ResponseEntity<Book> editBook(@PathVariable Integer id, @RequestBody Book updatedBook) {
        Optional<Book> optionalBook = bookRepo.findById(id);
        if (optionalBook.isPresent()) {
            Book existingBook = optionalBook.get();

            // Update the attributes of the existing book
            existingBook.setIssuedCopies(updatedBook.getIssuedCopies());
            existingBook.setTotalCopies(updatedBook.getTotalCopies());

            // Update other attributes as needed

            Book editedBook = bookRepo.save(existingBook);
            return ResponseEntity.ok(editedBook);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}

